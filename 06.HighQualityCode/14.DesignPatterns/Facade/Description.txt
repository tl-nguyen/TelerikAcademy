The facade pattern (or façade pattern) is a software design pattern commonly used with object-oriented programming. The name is by analogy to an architectural 
facade.

A facade is an object that provides a simplified interface to a larger body of code, such as a class library. A facade can:

make a software library easier to use, understand and test, since the facade has convenient methods for common tasks;
make the library more readable, for the same reason;
reduce dependencies of outside code on the inner workings of a library, since most code uses the facade, thus allowing more flexibility in developing the system;
wrap a poorly designed collection of APIs with a single well-designed API (as per task needs).

A Facade is used when one wants an easier or simpler interface to an underlying implementation object. Alternatively, an adapter is used when the wrapper must respect 
a particular interface and must support polymorphic behavior. A decorator makes it possible to add or alter behavior of an interface at run-time.