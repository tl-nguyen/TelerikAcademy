In class-based programming, the factory method pattern is a creational pattern which uses factory methods to deal with the problem of 
creating objects without specifying the exact class of object that will be created. This is done by creating objects via a factory method, 
which is either specified in an interface (abstract class) and implemented in implementing classes (concrete classes); or implemented in a 
base class (optionally as a template method), which can be overridden when inherited in derived classes; rather than by a constructor.

The factory method pattern should not be confused with the more general notion of factories and factory methods. The factory method pattern is 
the best-known use of factories and factory methods, but not all uses of factory methods are examples of the factory method pattern – only when 
inheritance is involved (a class implementing an interface, or derived class, implements a factory method) is it an example of the factory method 
pattern. More basic uses of factories are not examples of the factory method pattern, and may instead be referred to as the factory pattern[1] 
or a simple factory;[2] these are discussed at factory.

The essence of this pattern is to "Define an interface for creating an object, but let the classes that implement the interface decide which 
class to instantiate. The Factory method lets a class defer instantiation to subclasses."[3]

Creating an object often requires complex processes not appropriate to include within a composing object. The object's creation may lead to a 
significant duplication of code, may require information not accessible to the composing object, may not provide a sufficient level of abstraction, 
or may otherwise not be part of the composing object's concerns. The factory method design pattern handles these problems by defining a separate method 
for creating the objects, which subclasses can then override to specify the derived type of product that will be created.

The factory method pattern relies on inheritance, as object creation is delegated to subclasses that implement the factory method to create objects.[4]